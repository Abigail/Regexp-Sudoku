#!/opt/perl/bin/perl

use 5.028;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';
use experimental 'lexical_subs';

use lib qw [lib ../lib];

use Regexp::Sudoku;
use Time::HiRes qw [time];

my $input;
undef $/;
if (@ARGV) {
    my $file = pop @ARGV;
    $input = do {local @ARGV = $file; <>};
}
else {
    $input = <>;
}

my @sections = split /\n==\n/ => $input;
my $clues = shift @sections;

my ($arg_section) = grep {/^Args/} @sections;
my $args = {};
if ($arg_section) {
    $arg_section =~ s/^.*\n//;  # Remove header
    $args = eval $arg_section;
    die "Cannot parse $arg_section" if $@;
}


#
# Figure out the size
#
my @lines = split /\n/ => $input;
my @first = $lines [0] =~ /\S+/g;
my $size  = @first;

my $sudoku  =  Regexp::Sudoku:: -> new -> init (size  => $size,
                                                clues => $clues,
                                                %$args,
                                                @ARGV);
my $subject  = $sudoku -> subject;
my $pattern  = $sudoku -> pattern;

my $start    = time;
my $match    = $subject =~ $pattern;
my $end      = time;
my $run_time = $end - $start;
my $hours    = int ($run_time / 3600);
my $minutes  = int ($run_time /   60) % 60;
my $seconds  =      $run_time - 3600 * $hours - 60 * $minutes;

if ($match) {
    my $bw = $sudoku -> box_width;
    my $bh = $sudoku -> box_height;
    foreach my $r (1 .. $size) {
        foreach my $c (1 .. $size) {
            my $cell = "R${r}C${c}";
            print " " if $c > 1;
            print $+ {$cell};
            if ($c % $bw == 0 && $c != $size) {
                print " ";
            }
        }
        print "\n" if $r % $bh == 0 && $r != $size;
        print "\n";
    }
}
else {
    print "No match!";
}

printf "\nRuntime: %02d:%02d:%07.4f\n", $hours, $minutes, $seconds;

__END__
