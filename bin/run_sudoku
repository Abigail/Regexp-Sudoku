#!/opt/perl/bin/perl

use 5.028;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';
use experimental 'lexical_subs';

use lib qw [lib ../lib];

use Time::HiRes qw [time];
use Getopt::Long;

use Regexp::Sudoku;

GetOptions ('skip-match'  =>  \my $skip_match);

my $input;
undef $/;
if (@ARGV) {
    my $file = pop @ARGV;
    $input = do {local @ARGV = $file; <>};
}
else {
    $input = <>;
}

my @sections = split /\n==\n/ => $input;
my $clues = shift @sections;

#
# Figure out the size
#
my @lines = split /\n/ => $input;
my @first = $lines [0] =~ /\S+/g;
my $size  = @first;


my ($create_section) = grep {/^Create/} @sections;
if ($create_section) {
    $create_section =~ s/^.*\n//;
}
else {
    $create_section = "Regexp::Sudoku:: -> new -> init (size => $size)";
}


my $sudoku = eval $create_section or die $@;
   $sudoku -> set_clues ($clues);

my $subject  = $sudoku -> subject;
my $pattern  = $sudoku -> pattern;
my ($hours, $minutes, $seconds);

unless ($skip_match) {
    my $start    = time;
    my $match    = $subject =~ $pattern;
    my $end      = time;
    my $run_time = $end - $start;
       $hours    = int ($run_time / 3600);
       $minutes  = int ($run_time /   60) % 60;
       $seconds  =      $run_time - 3600 * $hours - 60 * $minutes;

    if ($match) {
        my $bw = $sudoku -> box_width;
        my $bh = $sudoku -> box_height;
        foreach my $r (1 .. $size) {
            foreach my $c (1 .. $size) {
                my $cell = "R${r}C${c}";
                print " " if $c > 1;
                print $+ {$cell};
                if ($c % $bw == 0 && $c != $size) {
                    print " ";
                }
            }
            print "\n" if $r % $bh == 0 && $r != $size;
            print "\n";
        }
    }
    else {
        print "No match!\n";
    }
    print "\n";
}

sub format_time ($hours, $minutes, $seconds) {
    return sprintf "%d hours %d minutes"   => $hours,   $minutes if $hours;
    return sprintf "%d minutes %d seconds" => $minutes, $seconds if $minutes;
    return sprintf "%.2f seconds"          => $seconds;
}
sub format_number ($number) {
    $number =~ s/[0-9]\K(?=(?:[0-9][0-9][0-9])+$)/,/rg;
}

printf "Subject: %s characters\n"       => format_number length $subject;
printf "Pattern: %s characters\n"       => format_number length $pattern;

printf "Number of statements: %s\n"     => format_number $subject =~ y/\n/\n/;
printf "Number of backreferences: %s\n" =>
                  format_number scalar (() = $pattern =~ /\\g\{/g);

printf "Runtime: %s\n", format_time $hours, $minutes, $seconds
        unless $skip_match;

__END__
